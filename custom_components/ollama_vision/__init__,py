import base64
from homeassistant.core import HomeAssistant, ServiceCall
from homeassistant.helpers.aiohttp_client import async_get_clientsession
from .const import DOMAIN, CONF_OLLAMA_HOST, CONF_OLLAMA_MODEL

async def async_setup(hass: HomeAssistant, config: dict) -> bool:
    return True

async def async_setup_entry(hass: HomeAssistant, entry) -> bool:
    ollama_host = entry.data[CONF_OLLAMA_HOST]
    ollama_model = entry.data[CONF_OLLAMA_MODEL]
    session = async_get_clientsession(hass)

    async def handle_send_image(call: ServiceCall):
        image_url = call.data.get("image_url")
        prompt = call.data.get("prompt")
        image_name = call.data.get("image_name")

        if not image_url or not prompt or not image_name:
            hass.logger.error("Image URL, prompt, and image name must be provided when calling generate_image_description")
            return
        
        if not image_name.isalpha():
            hass.logger.error("Image name must only consist of letters a-z")
            return

        try:
            async with session.get(image_url) as response:
                if response.status != 200:
                    hass.logger.error(f"Failed to download image: {response.status}")
                    return
                image_bytes = await response.read()
                base64_image = base64.b64encode(image_bytes).decode('utf-8')
        except Exception as e:
            hass.logger.error(f"Error fetching image: {e}")
            return

        payload = {
            "model": ollama_model,
            "prompt": prompt,
            "images": [base64_image],
        }

        try:
            async with session.post(f"{ollama_host}/api/generate", json=payload) as res:
                if res.status != 200:
                    hass.logger.error(f"Ollama response error: {res.status}")
                    return
                data = await res.json()
                description = data.get("response", "").strip()

                safe_name = image_name.lower().replace(' ', '_')

                # Dynamisk oppretting/oppdatering av sensor-tilstand
                hass.states.async_set(f"{DOMAIN}.{safe_name}", new_state=description)

            hass.bus.async_fire(f"{DOMAIN}_image_description_generated", {
                "image_name": image_name,
                "description": description,
            })

        except Exception as e:
            hass.logger.error(f"Ollama error: {e}")
            return

    hass.services.async_register(DOMAIN, "generate_image_description", handle_send_image)
    return True

async def async_unload_entry(hass: HomeAssistant, entry) -> bool:
    hass.services.async_remove(DOMAIN, "generate_image_description")
    return True

async def async_reload_entry(hass: HomeAssistant, entry) -> None:
    await async_unload_entry(hass, entry)
    await async_setup_entry(hass, entry)
