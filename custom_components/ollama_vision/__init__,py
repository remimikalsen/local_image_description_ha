"""
Custom integration for Ollama Vision with Home Assistant.
"""
from __future__ import annotations
from typing import TYPE_CHECKING

import base64
from homeassistant.const import Platform
from homeassistant.core import ServiceCall
from homeassistant.helpers.aiohttp_client import async_get_clientsession

from .const import DOMAIN, CONF_OLLAMA_HOST, CONF_OLLAMA_MODEL, LOGGER
from .coordinator import OllamaVisionDataUpdateCoordinator

if TYPE_CHECKING:
    from homeassistant.core import HomeAssistant
    from homeassistant.config_entries import ConfigEntry

PLATFORMS: list[Platform] = [
    Platform.SENSOR,
]

async def async_setup_entry(
    hass: HomeAssistant,
    entry: ConfigEntry,
) -> bool:
    """Set up Ollama Vision from a config entry."""
    hass.data.setdefault(DOMAIN, {})
    
    # Create client session
    session = async_get_clientsession(hass)
    
    # Create coordinator for this entry
    coordinator = OllamaVisionDataUpdateCoordinator(
        hass=hass,
        logger=LOGGER,
        name=f"{DOMAIN}_{entry.entry_id}",
        ollama_host=entry.data[CONF_OLLAMA_HOST],
        ollama_model=entry.data[CONF_OLLAMA_MODEL],
        session=session,
    )
    
    # Store coordinator and other data
    hass.data[DOMAIN][entry.entry_id] = {
        "coordinator": coordinator,
        "host": entry.data[CONF_OLLAMA_HOST],
        "model": entry.data[CONF_OLLAMA_MODEL],
    }
    
    # Set up service
    async def handle_send_image(call: ServiceCall) -> None:
        """Handle the service call to describe an image."""
        image_url = call.data.get("image_url")
        prompt = call.data.get("prompt")
        image_name = call.data.get("image_name")

        if not image_url or not prompt or not image_name:
            LOGGER.error("Image URL, prompt, and image name must be provided when calling generate_image_description")
            return
        
        if not image_name.isalpha():
            LOGGER.error("Image name must only consist of letters a-z")
            return

        # Process the image using the coordinator
        await coordinator.process_image(image_url, prompt, image_name)

    # Register service
    hass.services.async_register(DOMAIN, "generate_image_description", handle_send_image)
    
    # Forward the setup to platforms
    await hass.config_entries.async_forward_entry_setups(entry, PLATFORMS)
    
    # Register update listener
    entry.async_on_unload(entry.add_update_listener(async_reload_entry))
    
    return True

async def async_unload_entry(
    hass: HomeAssistant,
    entry: ConfigEntry,
) -> bool:
    """Handle removal of an entry."""
    # Unload platforms
    unload_ok = await hass.config_entries.async_unload_platforms(entry, PLATFORMS)
    
    # Remove the service if this is the last entry
    if len(hass.data[DOMAIN]) <= 1:
        hass.services.async_remove(DOMAIN, "generate_image_description")
    
    # Remove data for this entry
    if entry.entry_id in hass.data[DOMAIN]:
        hass.data[DOMAIN].pop(entry.entry_id)
    
    return unload_ok

async def async_reload_entry(
    hass: HomeAssistant,
    entry: ConfigEntry,
) -> None:
    """Reload config entry."""
    await async_unload_entry(hass, entry)
    await async_setup_entry(hass, entry)